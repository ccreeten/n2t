/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        Mux(a = true, b = instruction[5], sel = instruction[15], out = loadA);
        Mux(a = false, b = instruction[4], sel = instruction[15], out = loadD);
        Mux(a = false, b = instruction[3], sel = instruction[15], out = writeM);
        
        Mux16(a = instruction, b = alu, sel = instruction[15], out = inA);
        Mux16(a = outA, b = inM, sel = instruction[12], out = y);

        ARegister(in = inA, load = loadA, out = outA, out[0..14] = addressM);
        DRegister(in = alu, load = loadD, out = outD, out = x);
        
        ALU(x = x, y = y, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = alu, out = outM, zr = zr, ng = ng);
        
        DMux4Way(in = true, sel[0] = ng, sel[1] = zr, a = gt, b = lt, c = eq);
        And(a = instruction[0], b = gt, out = jgt);
        And(a = instruction[1], b = eq, out = jeq);
        And(a = instruction[2], b = lt, out = jlt);
        And(a = instruction[0], b = instruction[1], out = j12);
        And(a = instruction[2], b = j12, out = jany);
        Or8Way(in[0] = jgt, in[1] = jlt, in[2] = jeq, in[3] = jany, out = jmp);
        And(a = instruction[15], b = jmp, out = load);
        Not(in = load, out = inc);
        PC(in = outA, load = load, inc = inc, reset = reset, out[0..14] = pc);
}
